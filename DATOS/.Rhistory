xlab("Región (descripción)") + ylab("Frecuencia (cantidad)")  # etiquetas
ggplot(tipos2011, aes(x = TipoAccidente, y = Cantidad)) +
geom_boxplot()
ggplot(afect2011, aes(x=Cantidad)) + geom_histogram(binwidth = 50)
ggplot(tipos[tipos$Muestra == "Nacional", ],
aes(x=TipoAccidente, y=Cantidad)) +
facet_grid(Anio ~ Descripcion) +
coord_flip() +
geom_bar(stat="identity")
msj <- read.csv("http://users.dcc.uchile.cl/~hsarmien/mineria/datasets/messages.csv",sep = ";", quote = "\"'")
head(msj)
replacement.list <- list('á' = 'a', 'é' = 'e', 'í' = 'i', 'ó' = 'o', 'ú' = 'u' ,'Á' = 'A', 'É' = 'E', 'Í' = 'I', 'Ó' = 'O', 'Ú' = 'U')
msj <- msj %>%
mutate(tweet_text_nacc = chartr(old = names(replacement.list) %>% str_c(collapse = ''),
new = replacement.list %>% str_c(collapse = ''),
x = tweet_text))
library(tm)
docs <- VectorSource(msj[, 3])
docs <- VCorpus(docs)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, content_transformer(gsub), pattern = "/", replacement = "")
docs <- tm_map(docs, content_transformer(gsub), pattern = '[[:digit:]]+', replacement = "")  #elimina cualquier digito
removeSpecialChars <- function(x) gsub("[^ñÑa-zA-Z0-9 ]","",x) #ojo que incluimos las letras ñ de forma literal
docs <- tm_map(docs, content_transformer(removeSpecialChars))
dtm <- DocumentTermMatrix(docs)
inspect(dtm)
dim(dtm)
inspect(dtm[1:3, 1:10])
dtm.matrix <- as.matrix(dtm)
freq <- colSums(dtm.matrix)
word_freq <- data.frame(word = names(freq), freq = freq, row.names = NULL)
word_freq <- word_freq[order(-word_freq$freq),]
library(ggplot2)
ggplot(word_freq[1:20,], aes(x = reorder(word, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip()+
ggtitle(label = "Top-20 palabras de la colección")
head(stopwords("spanish"),20)
docs <- tm_map(docs, removeWords, stopwords("spanish"))
stopwords_es <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/stopwords_es.txt" , stringsAsFactors = F)
head(stopwords_es)
stopwords_es$V1 <- iconv(stopwords_es$V1, from="latin1",to="ASCII//TRANSLIT")
docs <- tm_map(docs, removeWords, stopwords_es$V1)
dtm.sw <- DocumentTermMatrix(docs)
dtm.sw.matrix <- as.matrix(dtm.sw)
freq.sw <- colSums(dtm.sw.matrix)
word_freq.sw <- data.frame(word = names(freq.sw), freq = freq.sw, row.names = NULL)
word_freq.sw <- word_freq.sw[order(-word_freq.sw$freq),]
ggplot(word_freq.sw[1:20,], aes(x = reorder(word, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip()+
ggtitle(label = "Top-20 palabras de la colección sin stopwords")
install.packages("reshape")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("tm")
install.packages("reshape")
install.packages("reshape")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("tm")
x <- c(1, 2, 3)
x^2
x <- c(1, 2, 3)
x^2
# un vector cuyos valores son los enteros 1 2 3
c(1, 2, 3)
# un vector cuyos valores son caracteres a,b,c
c("a", "b", "c")
# un vector cuyos valores tienen nombre
c(a = 1, b = 2, c = 3)
# se asigna el valor 5 a la variable a
a <- 5
# la asignacion no imprime el resultado, para ello hay que llamar directamente a la variable
a
# una forma de asignar y evaluar a la vez es usar paréntesis
(a <- 5)
# se asigna un arreglo a a2
a2 <- c(1, a + 1, a - 1)
a2
# se asigna un arreglo a a3 con encabezados incluidos
a3 <- c(a = 1, b = 2, c = a + 2)
names(a3) # muestro los encabezados de a3
# c() también sirve para "combinar" valores
# de esta forma se puede adjuntar valores a un vector
# nota que los números y caracteres son vectores de largo 1
a <- c(1, 2, 3)
b <- c(a, 4, 5, 6)
b
# vector que va de 1 a 10
seq(1, 10)
# azúcar sintáctico para lo anterior
1:10
# vector que va de 1 a 9, cada 2
seq(1, 10, 2)
# repetir un valor N veces
rep(5, 3)
# repetir un vector N veces
rep(c(1, 2), 3)
# suma los valores de un vector
sum(seq(1, 10, 2))
# largo del vector
length(c(1, 2, 3))
# Operaciones típicas
# Nota que las funciones están vectorizadas, es decir, funcionan sobre escalares y vectores (recuerda que un escalar es un vector de largo 1)
a <- c(1, 3, 5, 7)
# Exponencial
exp(a)
# Suma
sum(a)
# Logaritmo natural
log(a)
# Log base 10
log10(a)
# Promedio
mean(a)
# Desv estandar
sd(a)
# Mediana
median(a)
# definimos una tabla con dos columnas, `x` e `y`, cuyos valores son como sigue
d <- data.frame(x = c(10, 20, 30), y = c("a", "b", "c"), voltaje= rep(1,3))
# Muestra todo el data frame, note como se crean los encabezados.
d
# Para mostrar sólo la columna x.
d$x
# Para mostrar sólo la columna y.
d$y
# Para indicar el número de filas de d.
nrow(d)
# Para indicar el número de columnas de d.
ncol(d)
# Para indicar el número de filas y columnas de d
dim(d)
tipos <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/accidentes_2010_2011.txt")
afectados <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/afectados_2010_2011.txt")
tipos <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/accidentes_2010_2011.txt", encoding = "UTF-8", as.is = F)
afectados <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/afectados_2010_2011.txt", encoding = "UTF-8", as.is = F)
str(tipos)
str(afectados)
head(tipos)
nrow(tipos)
head(afectados)
nrow(afectados)
summary(tipos)
summary(afectados)
# promedio columna Cantidad
mean(tipos$Cantidad)
# desviacion estandar
sd(afectados$Cantidad)
# minimo (maximo)
min(tipos$Cantidad)
# mediana
median(tipos$Cantidad)
# cuantiles, los valores que son mayores que una fracción $q$ de los datos
quantile(tipos$Cantidad)
quantile(tipos$Cantidad, probs = c(0, .5, .8, .9))
# diferencia entre cuartil 3 y cuartil 1  (Q3 - Q1), o cuantil 0.75 y cuantil 0.25
IQR(tipos$Cantidad)
# muestra sólo la columna Cantidad
# note que el resultado de esta operación es un Vector
head(tipos$Cantidad)
# en R los índices parten desde 1
# note que el output en este caso es un data frame
head(tipos[5])
head(tipos["Cantidad"])
# se puede seleccionar más de una columna
head(tipos[c(4, 5)])
head(tipos[c("TipoAccidente", "Cantidad")])
# fila 3, columna 5
# el resultado es un vector
tipos[3, 5]
# De la fila 3, muestra todas las columnas
# el resultado es un data frame
tipos[3, ]
head(tipos[3])
# Muestra la columna Cantidad
# en este caso, el output es un vector
head(tipos[, c("Cantidad")])
# Muestra los primeros 6 datos y las columnas seleccionadas
tipos[0:6, c("Anio","TipoAccidente")]
# Para cada valor de la columna Anio, indica si es 2010 o no (mediante True y False)
head(afectados$Anio == 2010)
# Suma cuántos datos hay en la columna Anio con valor 2010
sum(afectados$Anio == 2010)
sum(is.na(afectados$Anio))
sapply(afectados, function(x) sum(is.na(x)))
# Filtra los datos cuyo año es 2011 y muestra todas las columnas (notar que ahora no muestra TRUE/FALSE)
head(afectados[afectados$Anio == 2011, ])
# Filtramos que la columna Anio sea 2011 y además que la columna Muestra sea Regional. Se muestran todas las columnas.
head(afectados[afectados$Anio == 2011 & afectados$Muestra == "Regional", ])
# Filtramos que la columna Anio sea 2011 y además que la columna Muestra sea Regional. Seleccionamos la Descripcion y la Cantidad
head(afectados[afectados$Anio == 2011 & afectados$Muestra == "Regional", c("Descripcion", "Cantidad")])
with(afectados, afectados[Anio == 2011 & Descripcion == "TEMUCO", ])
# Aplica la función suma (sum) a la columna Cantidad en base a los datos de Estado
aggregate(Cantidad ~ Estado, afectados, FUN=sum)
aggregate(Cantidad ~ Estado + Anio, afectados, FUN=sum)
# muestra los valores diferentes que tiene la columna TipoAccidente.
unique(tipos$TipoAccidente)
# Para hacer el ejemplo pequeño, vamos a tomar los 10 primeros datos de afectados
afectados_reducido <- afectados[1:10,]
# Ordenar ascendentemente la columna Cantidad
afectados_reducido[order(afectados_reducido$Cantidad), ]
# Ordenar descendente la columna Cantidad
afectados_reducido[order(afectados_reducido$Cantidad, decreasing = TRUE), ]
# Otra forma de ordenar descendente
afectados_reducido[order(-afectados_reducido$Cantidad), ]
a <- data.frame(x1 = 0:8, y1 = c(10,20,40,60,80,100,120,140,160))
b <- data.frame(x1 = c(1,2,4,6,8,10), y2 = c(0,3,5,7,9,11))
a
b
# Inner join
merge(a, b, by = "x1")
# Full outer join
merge(a, b, by = "x1", all = T)
# Left outer join
merge(a, b, by = "x1", all.x = T)
# Right outer join
merge(a, b, by = "x1", all.y = T)
df <- data.frame(x1=1:10, y1=1:10)
df
rowSums(df)  # suma cada fila de df
rowSums(df[df$x1 > 5,])  # suma las filas cuyo x1 es mayor a 5
colSums(df)
library("reshape")
d <- data.frame(jornada = c(1,2,1,2),
equipo = c("CC", "CC", "U", "U"),
favor = c(3, 2, 1, 5),
contra = c(0, 1, 2, 1))
d
f1 <- d[d$jornada == 1,]
sum(f1[, c(3,4)])  # c(3,4) indica que tomará la columna 3 y la 4.
sum(f1[, c("favor", "contra")])  # lo mismo
sum(d[d$jornada == 1, 3:4])        # lo mismo
d2 <- melt(d, id=c("jornada", "equipo"))  # jornada y equipo queda fijo, se crea un registro para cada instancia
d2   # observe qué es lo que hace
f2 <- d2[d2$jornada == 1,]
sum(f2$value)
library(tidyverse)
# Informacion del dataframe
glimpse(afectados)
# Seleccionar una columna del dataframe
afectados %>%
select(Cantidad) %>%
head()
afectados %>%
filter(Anio == 2010 & Muestra == "Comunal") %>%   # Año 2010 y solo comunas
group_by(Estado) %>%                       # Agrupamos por "muerto", "leve", etc
summarise(total = sum(Cantidad)) %>%              # Creamos una nueva columna a partir de cada grupo, llamada "total"
arrange(-total)           # Ordenamos descendentemente por "total"
sp <- afectados %>%
spread(key = Estado, value = Cantidad)
head(sp)
# en dplyr podemos generar un vector de nombres usando la notacion:
# en este caso, `Graves:Muertos` creará un vector que considerará el orden del data frame original:
# -> c(Graves, Leves, MenosGraves, Muertos)
sp %>%
gather(Graves:Muertos, key = "Estado", value = "Cantidad") %>%
head()
plot(exp(1:10))
plot(exp(1:10), type = "l")
plot(exp(1:10), main="Mi primer gráfico", xlab="eje x", ylab="eje y", type = "l")
tipos2011 <- with(tipos,tipos[Muestra == "Regional" & Anio == 2011, ])
plot(tipos2011$TipoAccidente, tipos2011$Cantidad)
plot(tipos2011$TipoAccidente, tipos2011$Cantidad, ylim=c(0,4000), main="TITULO",
xlab="eje x", ylab="eje y")
head(afectados)
afect2011 <- with(afectados,
afectados[ Muestra == "Regional" &
Anio == 2011 &
Estado == "Muertos", ])
barplot(afect2011$Cantidad, names.arg = afect2011$Descripcion)
hist(afect2011$Cantidad)
plot(density(afect2011$Cantidad))
library(ggplot2)  # cargamos la librería
ggplot(afect2011) +   # asociamos un data frame a ggplot
geom_bar(aes(x = Descripcion, y = Cantidad), stat="identity") +   # creamos un gráfico de barras como una capa
coord_flip() +  # transformamos el gráfico invirtiendo los ejes de coordenadas (sólo visualmente)
ggtitle("Muertos por accidentes durante el 2011") + # título
xlab("Región (descripción)") + ylab("Frecuencia (cantidad)")  # etiquetas
ggplot(tipos2011, aes(x = TipoAccidente, y = Cantidad)) +
geom_boxplot()
ggplot(afect2011, aes(x=Cantidad)) + geom_histogram(binwidth = 50)
ggplot(tipos[tipos$Muestra == "Nacional", ],
aes(x=TipoAccidente, y=Cantidad)) +
facet_grid(Anio ~ Descripcion) +
coord_flip() +
geom_bar(stat="identity")
msj <- read.csv("http://users.dcc.uchile.cl/~hsarmien/mineria/datasets/messages.csv",sep = ";", quote = "\"'")
head(msj)
replacement.list <- list('á' = 'a', 'é' = 'e', 'í' = 'i', 'ó' = 'o', 'ú' = 'u' ,'Á' = 'A', 'É' = 'E', 'Í' = 'I', 'Ó' = 'O', 'Ú' = 'U')
msj <- msj %>%
mutate(tweet_text_nacc = chartr(old = names(replacement.list) %>% str_c(collapse = ''),
new = replacement.list %>% str_c(collapse = ''),
x = tweet_text))
library(tm)
docs <- VectorSource(msj[, 3])
docs <- VCorpus(docs)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, content_transformer(gsub), pattern = "/", replacement = "")
docs <- tm_map(docs, content_transformer(gsub), pattern = '[[:digit:]]+', replacement = "")  #elimina cualquier digito
removeSpecialChars <- function(x) gsub("[^ñÑa-zA-Z0-9 ]","",x) #ojo que incluimos las letras ñ de forma literal
docs <- tm_map(docs, content_transformer(removeSpecialChars))
dtm <- DocumentTermMatrix(docs)
inspect(dtm)
dim(dtm)
inspect(dtm[1:3, 1:10])
dtm.matrix <- as.matrix(dtm)
freq <- colSums(dtm.matrix)
word_freq <- data.frame(word = names(freq), freq = freq, row.names = NULL)
word_freq <- word_freq[order(-word_freq$freq),]
library(ggplot2)
ggplot(word_freq[1:20,], aes(x = reorder(word, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip()+
ggtitle(label = "Top-20 palabras de la colección")
head(stopwords("spanish"),20)
docs <- tm_map(docs, removeWords, stopwords("spanish"))
stopwords_es <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/stopwords_es.txt" , stringsAsFactors = F)
head(stopwords_es)
stopwords_es$V1 <- iconv(stopwords_es$V1, from="latin1",to="ASCII//TRANSLIT")
docs <- tm_map(docs, removeWords, stopwords_es$V1)
dtm.sw <- DocumentTermMatrix(docs)
dtm.sw.matrix <- as.matrix(dtm.sw)
freq.sw <- colSums(dtm.sw.matrix)
word_freq.sw <- data.frame(word = names(freq.sw), freq = freq.sw, row.names = NULL)
word_freq.sw <- word_freq.sw[order(-word_freq.sw$freq),]
ggplot(word_freq.sw[1:20,], aes(x = reorder(word, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip()+
ggtitle(label = "Top-20 palabras de la colección sin stopwords")
install.packages("reshape")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("tm")
install.packages("reshape")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("tm")
# RESPUESTA
dim(tipos)
tipos <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/accidentes_2010_2011.txt", encoding = "UTF-8", as.is = F)
head(tipos)
# RESPUESTA
dim(tipos)
# RESPUESTA
dim[200,]
# RESPUESTA
tipos[200,]
View(tipos)
# RESPUESTA
aggregate(Cantidad ~ Anio, tipos, FUN=sum)
# RESPUESTA
aggregate(Cantidad ~ Anio + Muestra, tipos, FUN=sum)
# RESPUESTA
aggregate(Cantidad ~ Anio, tipos[tipos$Muestra == Nacional, ], FUN=sum)
# RESPUESTA
aggregate(Cantidad ~ Anio, tipos[tipos$Muestra == "Nacional", ], FUN=sum)
# RESPUESTA
aggregate(Cantidad ~ Anio, tipos[tipos$Muestra == "Nacional", ], FUN=sum)
# Es el 2011, como podemos aca ver filtrado
max(aggregate(Cantidad ~ Anio, tipos[tipos$Muestra == "Nacional", ], FUN=sum))
# RESPUESTA
acc11reg <- tipos[tipos[tipos$Muestra == "Regional",]$Anio == 2011,]
# RESPUESTA
acc11reg <- tipos[tipos[tipos$Muestra == "Regional",]$Anio == 2011,]
acc11reg
View(acc11reg)
acc11reg <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
# RESPUESTA
acc11reg <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11reg
View(acc11reg)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad$Descripcion, acc11reg, FUN=sum)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
ggplot(acc11regAcum)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
barplot(acc11regAcum)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
acc11regAcum
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
barplot(acc11regAcum)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
head(acc11regAcum)
barplot(acc11regAcum)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
head(acc11regAcum)
barplot(acc11regAcum$Cantidad, names.arg = acc11regAcum$Descripcion)
View(acc11regAcum)
barplot(acc11regAcum$Cantidad, names.arg = acc11regAcum$Descripcion[order(acc11regAcum$Descripcion$Cantidad, decreasing = True)])
barplot(acc11regAcum$Cantidad, names.arg = acc11regAcum$Descripcion[order(acc11regAcum$Cantidad, decreasing = True)])
barplot(acc11regAcum$Cantidad, names.arg = acc11regAcum$Descripcion[order(acc11regAcum$Cantidad, decreasing = true)])
barplot(acc11regAcum$Cantidad, names.arg = acc11regAcum$Descripcion[order(acc11regAcum$Cantidad, decreasing = TRUE)])
# Sorprendente como la reg metropolitana tiene un poco mas que el resto de las regiones muestreadas combinadas!
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
xd <- order(acc11regAcum$Cantidad, decreasing = TRUE)
head(xd)
# barplot(acc11regAcum$Cantidad, names.arg = acc11regAcum$Descripcion[])
# Sorprendente como la reg metropolitana tiene un poco mas que el resto de las regiones muestreadas combinadas!
xd <- acc11regAcum$Descripcion[order(acc11regAcum$Cantidad, decreasing = TRUE)]
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
xd <- acc11regAcum$Descripcion[order(acc11regAcum$Cantidad, decreasing = TRUE)]
head(xd)
# barplot(acc11regAcum$Cantidad, names.arg = acc11regAcum$Descripcion[])
# Sorprendente como la reg metropolitana tiene un poco mas que el resto de las regiones muestreadas combinadas!
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
xd <- acc11regAcum[order(acc11regAcum$Cantidad, decreasing = TRUE)]
xd <- acc11regAcum$Cantidad[order(acc11regAcum$Cantidad, decreasing = TRUE)]
head(xd)
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
ggplot(acc11regAcum, aes(x = reorder(word, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip()+
ggtitle(label = "Top-20 palabras de la colección")
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
library(ggplot2)
ggplot(acc11regAcum, aes(x = reorder(word, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip()+
ggtitle(label = "Top-20 palabras de la colección")
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
library(ggplot2)
ggplot(acc11regAcum, aes(x = reorder(Descripcion, Cantidad), y = Cantidad)) +
geom_bar(stat = "identity") +
coord_flip()+
ggtitle(label = "Top-20 palabras de la colección")
# Sorprendente como la reg metropolitana tiene un poco mas que el resto de las regiones muestreadas combinadas!
# RESPUESTA
acc11reg     <- tipos[tipos$Anio == 2011 & tipos$Muestra == "Regional",]
acc11regAcum <- aggregate(Cantidad ~ Descripcion, acc11reg, FUN=sum)
library(ggplot2)
ggplot(acc11regAcum, aes(x = reorder(Descripcion, Cantidad), y = Cantidad)) +
geom_bar(stat = "identity") +
coord_flip()+
ggtitle(label = "Top mejores regiones para tener tu accidente")
# Sorprendente como la reg metropolitana tiene un poco mas que el resto de las regiones muestreadas combinadas!
diamonds <- read.csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/diamonds.csv")
head(diamonds)
View(diamonds)
# RESPUESTA
aggregate(price ~ cut,diamonds,FUN=mean)
# RESPUESTA
asd <- aggregate(price ~ cut, diamonds, FUN=mean)
View(asd)
# RESPUESTA
dia2 <- aggregate(price ~ cut, diamonds, FUN=mean)
dia2[order(dia2$price),]
clear
cl
cls
new
setwd("D:\\Devel\\Repo\\CC3201_2_2022\\DATOS")
t <- read.csv("raw_2021.csv")
t1 <- t[t$scheduled_dep != "",]
t1 <- t[t$real_dep != "",]
t1 <- t[t$scheduled_dep != "",]
t2 <- t1[t$scheduled_dep != "",]
t2 <- t1[t1$real_dep != "",]
write.csv(t2, "D:\\Devel\\Repo\\CC3201_2_2022\\DATOS\\Filtrados.csv")
y <- read.csv("Filtrados.csv")
y
y
View(y)
write.csv(t2, "D:\\Devel\\Repo\\CC3201_2_2022\\DATOS\\filtrados.csv", row.names = FALSE)
y <- read.csv("filtrados.csv")
View(y)
unique(y[4])
y[3900,}]
y[3900,]
aggregate(y$line_type~line_type, y, FUN=length)
aggregate(t$line_type~line_type, t, FUN=length)
